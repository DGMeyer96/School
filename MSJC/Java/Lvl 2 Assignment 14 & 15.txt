/*
Daniel Meyer
0405182
12-1-15
Assignment 14/15
Using Regular Expressions
 */
package lvl2.assignment.pkg14;

import javax.swing.filechooser.FileFilter;
import javax.swing.JFileChooser;
import java.io.File;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.io.*;

public class Lvl2Assignment14 extends JFrame implements ActionListener
{
    Container content = this.getContentPane();

    JLabel lblFound = new JLabel("Words found:           ");
    JLabel lblPal = new JLabel("Palindromes found:");
    
    JButton btnFind = new JButton("Find");
    JButton btnOpen = new JButton("Open File");
    
    JTextArea taFound = new JTextArea();
    JTextArea taPal = new JTextArea();
    
    private String filePath;
    
    public Lvl2Assignment14()
    {
        this.setTitle("Using Regular Expressions");
        this.setSize(400,420);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);
        content.setLayout(new GridLayout(3,2, 10, 2));
        
        content.add(btnFind);
        btnFind.addActionListener(this);
        content.add(btnOpen);
        btnOpen.addActionListener(this);
        
        content.add(lblFound);
        content.add(taFound);
        taFound.setEditable(false);
        JScrollPane paneFound = new JScrollPane(taFound, 
            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, 
            JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        paneFound.setPreferredSize(new Dimension(200,150));
        content.add(paneFound);
        
        content.add(lblPal);
        content.add(taPal);
        taPal.setEditable(false);
        JScrollPane panePal = new JScrollPane(taPal, 
            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, 
            JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        panePal.setPreferredSize(new Dimension(200,150));
        content.add(panePal);
        
        
    }
    
    public class HtmlFilter extends FileFilter
    {
        public boolean accept(File f) 
        {
            return f.isDirectory()||f.getName().toLowerCase().endsWith(".html");
        }

        public String getDescription() 
        {
            return "html file (.html)";
        }
    }
    
    private void openFile(String file)
    {
        try
        {
            FileInputStream fis = new FileInputStream(file);
        }
        catch(FileNotFoundException fe)
        {
            System.out.println(fe.getMessage());
        }
    }
    
    private String chooseFile()
    {
        JFileChooser file = new JFileChooser();
        file.setFileFilter(new HtmlFilter());
        file.showDialog(content, "Open File");
        File f = file.getSelectedFile();
        if(f != null)
        {
            openFile(f.getPath());
            System.out.println("Opening: " + f.getPath());
            filePath = f.getPath();
        }
        return null;
    }
    
    public static void main(String[] args) 
    {
        Lvl2Assignment14 con = new Lvl2Assignment14();
    }

    public void actionPerformed(ActionEvent ae) 
    {
        if(ae.getSource() == btnOpen)
        {
            chooseFile();
        }
        else if(ae.getSource() == btnFind)
        {
            SearchText st = new SearchText(filePath);
            
            for(String str : st.words)
            {
                taFound.append(str + "\n");
            }
            for(String str : st.pals)
            {
                taPal.append(str + "\n");
            }
        }
    }  
}
