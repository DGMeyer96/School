/*
Daniel Meyer
0405182
10-6-15
Assignment 8
File Streams
 */
package lvl.pkg2.assignment.pkg8;


import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;
import java.awt.event.KeyEvent;
import javax.swing.filechooser.FileFilter;
import javax.swing.JFileChooser;
import java.io.File;

/**
 *  Who are you?
 *  What section is this?
 *  When are you turning this in?
 *
 *  An encrypting text editor
 *  CSIS 123B Homework
 *
 */
public class JPad extends GUIApp
                  implements ActionListener
{
    // Constructor -------------------------------------
    public JPad(String fname)
    {
        // Construct superclass, initialize fields
        super("JPad - " + fname);
        this.fname = fname;
        
        // Set layout & size ----------------------
        setLayout(new BorderLayout(5, 5));
        Toolkit tk = Toolkit.getDefaultToolkit();
        int w = tk.getScreenSize().width / 2;
        int h = tk.getScreenSize().height / 2;
        setBounds(0, 0, w, h);
        
        // Initialize & place TextArea ---------------- 
        add(ta,   "Center");
        ta.setFont(new Font("Courier", Font.PLAIN, 12));
        
        // Initialize & place status bar, toolbar, menu bar
        status.setBackground(Color.lightGray);
        add(status, "South");
        
        add(toolBar(), "North");
        
        this.setJMenuBar(menuBar());
          
        // Display initial file --------------------------
        readFile();
        this.setVisible(true);
       
    }
    
    /**
     *  Creates ToolBar object
     */
    JPanel toolBar()
    {
        JPanel p = new JPanel();
        p.setLayout(new FlowLayout(FlowLayout.LEFT));
        
        String[] btns = {"New", "Open", "Save", "Save As..."};
        for (int i = 0; i < btns.length; i++)
        {
            JButton b = new JButton(btns[i]);
            b.setActionCommand(btns[i]);
            b.addActionListener(this);
            p.add(b);
        }
        
        p.setBackground(Color.lightGray);
        
        return p;
    }
    
    /**
     *  Creates MenuBar
     */
    JMenuBar menuBar()
    {
        JMenuBar mb = new JMenuBar();
        
        JMenuItem New = new JMenuItem("New");
        New.addActionListener(this);
        New.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.ALT_MASK));
        
        JMenuItem Open = new JMenuItem("Open");
        Open.addActionListener(this);
        Open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.ALT_MASK));
        
        JMenuItem Save = new JMenuItem("Save");
        Save.addActionListener(this);
        Save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
        
        JMenuItem SaveAs = new JMenuItem("Save As...");
        SaveAs.addActionListener(this);
        SaveAs.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.ALT_MASK));
               
        JMenuItem Exit = new JMenuItem("Exit");
        Exit.addActionListener(this);
        Exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ActionEvent.ALT_MASK));
        
        JMenu fm = new JMenu("File");
        fm.add(New);
        fm.add(Open);
        fm.add(Save);
        fm.add(SaveAs);
        fm.addSeparator();
        fm.add(Exit);
        mb.add(fm);
        
        return mb;
    }
    
    /**
     *  Menu, Button handler
     */
    public void actionPerformed(ActionEvent ae)
    {
    	System.out.println(ae.getActionCommand());
    	
        if (ae.getActionCommand().equals("New"))
            newFile();
        else if (ae.getActionCommand().equals("Open"))
            openFile();
        else if (ae.getActionCommand().equals("Save"))
            saveFile();
        else if (ae.getActionCommand().equals("Save As..."))
            saveFileAs();
        else if (ae.getActionCommand().equals("Exit"))
            quitApp();
    }
    
    public class TxtFilter extends FileFilter
    {

        public boolean accept(File f) 
        {
            return f.isDirectory()||f.getName().toLowerCase().endsWith("*.jpad");
        }

        public String getDescription() 
        {
            return "jpad file (*.jpad)";
        }
        
    }
    
    /**
     *  Clears TextArea
     *  Sets fname to Untitled
     */
    private void newFile()
    {
        System.out.println("New File");
        /*
        1. Set fname to "Untitled"
        2. Clear ta
        3. Set focus to ta
        */
        fname = "Untitled";
        ta.setText("");
        ta.requestFocus();
    }
    
    /**
     *  Uses FileDialog to get FileName
     *  Sets fname to directory + filename         
     *  Calls readFile()
     */
    private void openFile()
    {
        System.out.println("Open File");
        /*
        1. Open a FileDialog using *.jpad as the mask
        2. If use cancels then print a message and return
        3. Otherwise, set fname to directory+filename,
        4. Call readFile()
        */
        
        JFileChooser file = new JFileChooser();
        file.setFileFilter(new TxtFilter());
        //file.showDialog(this, "Open");
        file.showOpenDialog(file);
        File f = file.getSelectedFile();
        
        if(f != null)
        {
            fname = f.getName();
            readFile();
        }
        else
        {
            status.setText("Cancelled");
            ta.requestFocus();
            return;
        }      
    }
    
    /**
     *  Check if file is "Untitled"
     *  Yes? Calls SaveFileAs()
     *  No?  Calls writeFile()
     */
    private void saveFile()
    {
        System.out.println("Save File");
        /*
        1. If fname equals "Untitled" call saveFileAs()
        2. Otherwise call writeFile()
        */
        if(fname == "Untitled")
        {
            saveFileAs();
        }
        else
        {
            writeFile();
        }
    }
        
    /**
     *  Use FileDialog to get name
     *  Sets fname variable
     *  Calls writeFile()
     */
    private void saveFileAs()
    {
        System.out.println("Save File As");
        /*
        1. Open a FileDialog using *.jpad as the mask
        2. If user cancels then just display message in status line
        3. Otherwise, set fname to chosen name [use directory]
        4. Call writeFile();
        */
        
        JFileChooser file = new JFileChooser();
        file.setFileFilter(new TxtFilter());
        file.showSaveDialog(file);
        File f = file.getSelectedFile();
        
        if(f != null)
        {
            fname = f.getName();
            writeFile();
        }
        else
        {
            status.setText("Cancelled");
            ta.requestFocus(); 
        }
    }
    
    /**
     *  Reads current file from fname 
     *  Store result in TextArea
     *  Success/Failure displayed in status
     */
    private void readFile()
    {
        /*
        1. If fname equals "Untitled" clear ta, return
        2. Else Create a FileInputStream using fname
        3. Read the file
        4. Store the results in ta
        5. Display message in status line 
        */
        if(fname == "Untitled")
        {
            ta.setText("");
            ta.requestFocus();
            return;
        }
        else
        {
            FileInputStream fis = null;
            
            try
            {
                fis = new FileInputStream(fname);
                String s = "";
                int ch;
                
                while((ch = fis.read()) != -1)
                {
                    s += (char)((ch + 128) % 256);
                }
                
                ta.setText(s);
                status.setText("File read successfully");
                super.setTitle("JPad - " + fname);
            }
            catch(FileNotFoundException e)
            {
                status.setText("Error file not found \n");
            }
            catch(IOException ie)
            {
                status.setText("Error reading file \n");
            }
            finally
            {
                try
                {
                    if(fis != null)
                    {
                        fis.close();
                    }
                }
                catch(IOException ie)
                {
                    System.out.println(ie.getMessage());
                }
            }
        }
        
    }

    /**
     *  Save current contents of TextArea 
     *  to the file named fname.
     *  Success/Failure displayed in status
     */
    private void writeFile()
    {
        /*
        1. Create a FileOutputStream using fname
        2. Write the contents of the file to disk
        3. Display message in status line
        */
        
        FileOutputStream fout = null;
        
        try
        {
            fout = new FileOutputStream(fname);
            String s = ta.getText();
            int ch;
            for(int i = 0; i < s.length() - 1; i++)
            {
                ch = s.charAt(i);
                fout.write((char)(ch + 128));
            }
            status.setText("File written successfully");
            super.setTitle("JPad - " + fname);
        }
        catch(FileNotFoundException e)
        {
            status.setText("Error file not found \n");
        }
        catch(IOException ie)
        {
            status.setText("Error writing file \n");
        }
        finally
        {
            try
            {
                if(fout != null)
                {
                    fout.close();
                }
            }
            catch(IOException ie)
            {
                System.out.println(ie.getMessage());
            }
        }
    }
    
    private void quitApp()
    {
        dispose();
        System.exit(0);
    }
    
    // Main Method -------------------------------------
    public static void main(String[] args)
    {
        if (args.length > 0) new JPad(args[0]);
        else                 new JPad("Untitled");
    }
    
    // Attributes --------------------------------------
    private JTextArea ta     = new JTextArea();
    private String   fname  = "";
    private JLabel    status = new JLabel("Ready", Label.LEFT);
}

